import { useState } from 'react'
import { Card } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Badge } from "@/components/ui/badge"
import Icon from "@/components/ui/icon"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"

export default function Index() {
  const [selectedChat, setSelectedChat] = useState(0)
  const [selectedChatType, setSelectedChatType] = useState('personal')
  const [messageText, setMessageText] = useState('')
  const [isOfflineMode, setIsOfflineMode] = useState(false)
  const [taiGaMode, setTaiGaMode] = useState(false)

  // –õ–∏—á–Ω—ã–µ —á–∞—Ç—ã
  const personalChats = [
    {
      id: 1,
      name: "–ú–∏—à–∞–Ω—è",
      lastMessage: "–ü—Ä–∏–≤–µ—Ç, –∑–µ–º–ª—è—á–æ–∫! –ö–∞–∫ –¥–µ–ª–∞ –≤ —Ç–∞–π–≥–µ? üêª",
      time: "15:42",
      avatar: "üêª",
      status: "–æ–Ω–ª–∞–π–Ω",
      unread: 3,
      messages: [
        { id: 1, sender: "–ú–∏—à–∞–Ω—è", text: "–ö–∞–∫ –¥–µ–ª–∞, –¥—Ä—É–≥? –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º?", time: "15:40", isMine: false, avatar: "üêª" },
        { id: 2, sender: "–Ø", text: "–ü—Ä–∏–≤–µ—Ç, –ú–∏—à–∞–Ω—è! –í—Å—ë –æ—Ç–ª–∏—á–Ω–æ, –≥–æ—Ç–æ–≤–ª—é—Å—å –∫ –ø–æ—Ö–æ–¥—É", time: "15:41", isMine: true, avatar: "üöÄ" },
        { id: 3, sender: "–ú–∏—à–∞–Ω—è", text: "–ü—Ä–∏–≤–µ—Ç, –∑–µ–º–ª—è—á–æ–∫! –ö–∞–∫ –¥–µ–ª–∞ –≤ —Ç–∞–π–≥–µ? üêª", time: "15:42", isMine: false, avatar: "üêª" }
      ]
    },
    {
      id: 2,
      name: "–®–∞–º–∞–Ω",
      lastMessage: "–ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç —è—Å–Ω–æ, -18¬∞C. –û–¥–µ–≤–∞–π—Å—è —Ç–µ–ø–ª–µ–µ! ‚ùÑÔ∏è",
      time: "14:35",
      avatar: "ü¶â",
      status: "–≤ —Ç–∞–π–≥–µ",
      unread: 1,
      messages: [
        { id: 1, sender: "–®–∞–º–∞–Ω", text: "–ó–¥–æ—Ä–æ–≤–æ! –ù—É–∂–µ–Ω –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã?", time: "14:30", isMine: false, avatar: "ü¶â" },
        { id: 2, sender: "–Ø", text: "–î–∞, –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞", time: "14:33", isMine: true, avatar: "üöÄ" },
        { id: 3, sender: "–®–∞–º–∞–Ω", text: "–ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç —è—Å–Ω–æ, -18¬∞C. –û–¥–µ–≤–∞–π—Å—è —Ç–µ–ø–ª–µ–µ! ‚ùÑÔ∏è", time: "14:35", isMine: false, avatar: "ü¶â" }
      ]
    },
    {
      id: 3,
      name: "–¢–∞—ë–∂–Ω—ã–π",
      lastMessage: "–ù–∞—à—ë–ª –æ—Ç–ª–∏—á–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä—ã–±–∞–ª–∫–∏! üé£",
      time: "12:15",
      avatar: "ü¶å",
      status: "–æ—Ñ—Ñ–ª–∞–π–Ω",
      unread: 0,
      messages: [
        { id: 1, sender: "–¢–∞—ë–∂–Ω—ã–π", text: "–≠–π, —Ä—ã–±–∞–∫! –•–æ—á–µ—à—å —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ?", time: "12:10", isMine: false, avatar: "ü¶å" },
        { id: 2, sender: "–Ø", text: "–ö–æ–Ω–µ—á–Ω–æ! –ì–¥–µ —ç—Ç–æ?", time: "12:12", isMine: true, avatar: "üöÄ" },
        { id: 3, sender: "–¢–∞—ë–∂–Ω—ã–π", text: "–ù–∞—à—ë–ª –æ—Ç–ª–∏—á–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä—ã–±–∞–ª–∫–∏! üé£", time: "12:15", isMine: false, avatar: "ü¶å" }
      ]
    }
  ]

  // –ì—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã (–°—Ç–æ–π–±–∏—â–∞)
  const groupChats = [
    {
      id: 1,
      name: "–°—Ç–æ–π–±–∏—â–µ \"–û—Ö–æ—Ç–Ω–∏–∫–∏\"",
      lastMessage: "–ö—Ç–æ –∑–Ω–∞–µ—Ç —Ö–æ—Ä–æ—à–∏–µ –º–µ—Å—Ç–∞ –≤–æ–∑–ª–µ –¢–æ–º—Å–∫–∞?",
      time: "16:20",
      avatar: "üèïÔ∏è",
      members: 24,
      unread: 5,
      messages: [
        { id: 1, sender: "–°—Ç–µ–ø–∞–Ω", text: "–ö—Ç–æ-–Ω–∏–±—É–¥—å –±—ã–ª –Ω–∞ –û–±–∏ –Ω–µ–¥–∞–≤–Ω–æ?", time: "16:15", isMine: false, avatar: "üéØ" },
        { id: 2, sender: "–ê–Ω–Ω–∞", text: "–î–∞, –≤—á–µ—Ä–∞ –±—ã–ª. –†—ã–±–∞ –∫–ª—é—ë—Ç —Ö–æ—Ä–æ—à–æ!", time: "16:18", isMine: false, avatar: "üé£" },
        { id: 3, sender: "–ú–∏—Ö–∞–∏–ª", text: "–ö—Ç–æ –∑–Ω–∞–µ—Ç —Ö–æ—Ä–æ—à–∏–µ –º–µ—Å—Ç–∞ –≤–æ–∑–ª–µ –¢–æ–º—Å–∫–∞?", time: "16:20", isMine: false, avatar: "üó∫Ô∏è" }
      ]
    },
    {
      id: 2,
      name: "–†—ã–±–∞–∫–∏ –ë–∞–π–∫–∞–ª–∞",
      lastMessage: "–ó–∞–≤—Ç—Ä–∞ –≤—Å—Ç—Ä–µ—á–∞–µ–º—Å—è —É –ø—Ä–∏—á–∞–ª–∞ –≤ 6:00",
      time: "15:45",
      avatar: "üêü",
      members: 15,
      unread: 2,
      messages: [
        { id: 1, sender: "–ö–∞–ø–∏—Ç–∞–Ω", text: "–ü–æ–≥–æ–¥–∞ –æ—Ç–ª–∏—á–Ω–∞—è –¥–ª—è —Ä—ã–±–∞–ª–∫–∏!", time: "15:40", isMine: false, avatar: "‚öì" },
        { id: 2, sender: "–Ø", text: "–ë—É–¥—É –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!", time: "15:43", isMine: true, avatar: "üöÄ" },
        { id: 3, sender: "–ö–∞–ø–∏—Ç–∞–Ω", text: "–ó–∞–≤—Ç—Ä–∞ –≤—Å—Ç—Ä–µ—á–∞–µ–º—Å—è —É –ø—Ä–∏—á–∞–ª–∞ –≤ 6:00", time: "15:45", isMine: false, avatar: "‚öì" }
      ]
    }
  ]

  // –ö–∞–Ω–∞–ª—ã (–ö–æ—á–µ–≤—ã–µ —Ç—Ä–æ–ø—ã)
  const channels = [
    {
      id: 1,
      name: "–ö–∞–Ω–∞–ª \"–ë–∞–π–∫–∞–ª\"",
      lastMessage: "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã: +4¬∞C. –û—Å—Ç–æ—Ä–æ–∂–Ω–æ –Ω–∞ –ª—å–¥—É!",
      time: "18:00",
      avatar: "üåä",
      subscribers: 1247,
      unread: 0,
      messages: [
        { id: 1, sender: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", text: "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ë–∞–π–∫–∞–ª–∞", time: "17:55", isMine: false, avatar: "üìã" },
        { id: 2, sender: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", text: "–í–∏–¥–∏–º–æ—Å—Ç—å: –æ—Ç–ª–∏—á–Ω–∞—è, –≤–µ—Ç–µ—Ä: 5 –º/—Å", time: "17:58", isMine: false, avatar: "üìã" },
        { id: 3, sender: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", text: "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã: +4¬∞C. –û—Å—Ç–æ—Ä–æ–∂–Ω–æ –Ω–∞ –ª—å–¥—É!", time: "18:00", isMine: false, avatar: "üìã" }
      ]
    }
  ]

  const getCurrentChats = () => {
    switch(selectedChatType) {
      case 'groups': return groupChats
      case 'channels': return channels
      default: return personalChats
    }
  }

  const getCurrentMessages = () => {
    const chats = getCurrentChats()
    return chats[selectedChat]?.messages || []
  }

  const getCurrentChatInfo = () => {
    const chats = getCurrentChats()
    return chats[selectedChat]
  }

  const handleSendMessage = () => {
    if (messageText.trim()) {
      const chatInfo = getCurrentChatInfo()
      const newMessage = {
        id: Date.now(),
        sender: "–Ø",
        text: messageText,
        time: new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' }),
        isMine: true,
        avatar: "üöÄ"
      }

      // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —á–∞—Ç–∞
      setTimeout(() => {
        let response = ""
        let avatar = ""
        let sender = ""

        if (selectedChatType === 'personal') {
          if (chatInfo?.name === "–ú–∏—à–∞–Ω—è") {
            response = "–û—Ç–ª–∏—á–Ω–æ! –ú–∏—à–∞–Ω—è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! üêª"
            avatar = "üêª"
            sender = "–ú–∏—à–∞–Ω—è"
          } else if (chatInfo?.name === "–®–∞–º–∞–Ω") {
            response = "–î—É—Ö–∏ —Ç–∞–π–≥–∏ –≥–æ–≤–æ—Ä—è—Ç: –≤—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ! ü¶â"
            avatar = "ü¶â"
            sender = "–®–∞–º–∞–Ω"
          }
        } else if (selectedChatType === 'groups') {
          response = "–ö—Ç–æ-—Ç–æ –∏–∑ —Å—Ç–æ–π–±–∏—â–∞ –æ—Ç–≤–µ—Ç–∏–ª: –∫–ª–∞—Å—Å–Ω–∞—è –∏–¥–µ—è!"
          avatar = "üèïÔ∏è"
          sender = "–£—á–∞—Å—Ç–Ω–∏–∫"
        } else {
          response = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: —Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
          avatar = "üìã"
          sender = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        }

        const responseMessage = {
          id: Date.now() + 1,
          sender,
          text: response,
          time: new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' }),
          isMine: false,
          avatar
        }

        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
        console.log('–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', newMessage)
        console.log('–û—Ç–≤–µ—Ç:', responseMessage)
      }, 1000)

      setMessageText('')
    }
  }

  return (
    <div className="min-h-screen bg-background">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è */}
      <header className="bg-gradient-to-r from-primary via-primary/90 to-accent p-6 text-white">
        <div className="container mx-auto">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="relative">
                <div className="text-4xl">‚ùÑÔ∏è</div>
                <div className="absolute -top-1 -right-1 text-lg">üåê</div>
              </div>
              <div>
                <h1 className="text-3xl font-bold text-white">UniSib</h1>
                <p className="text-blue-100 text-sm">–ì–∏–±—Ä–∏–¥ UniMessage + SibCHAT</p>
              </div>
            </div>
            
            <div className="flex items-center gap-3">
              {/* –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
              <Badge variant={isOfflineMode ? "destructive" : "default"} className="bg-white/20 text-white">
                <Icon name={isOfflineMode ? "WifiOff" : "Wifi"} size={16} className="mr-1" />
                {isOfflineMode ? "–û—Ñ—Ñ–ª–∞–π–Ω" : "–û–Ω–ª–∞–π–Ω"}
              </Badge>
              
              {/* –†–µ–∂–∏–º –¢–∞–π–≥–∞ */}
              <Button
                variant="outline"
                size="sm"
                onClick={() => setTaiGaMode(!taiGaMode)}
                className={`border-white/30 text-white hover:bg-white/20 ${taiGaMode ? 'bg-white/20' : ''}`}
              >
                <Icon name="TreePine" size={16} className="mr-1" />
                {taiGaMode ? "–í—ã–π—Ç–∏ –∏–∑ —Ç–∞–π–≥–∏" : "–†–µ–∂–∏–º —Ç–∞–π–≥–∞"}
              </Button>
            </div>
          </div>
        </div>
      </header>

      <div className="container mx-auto p-4">
        <div className="grid lg:grid-cols-3 gap-6 h-[calc(100vh-200px)]">
          
          {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —á–∞—Ç–∞–º–∏ */}
          <Card className="lg:col-span-1 p-4">
            <Tabs value={selectedChatType} onValueChange={setSelectedChatType} className="h-full flex flex-col">
              <TabsList className="grid w-full grid-cols-3">
                <TabsTrigger value="personal">–õ–∏—á–Ω—ã–µ</TabsTrigger>
                <TabsTrigger value="groups">–°—Ç–æ–π–±–∏—â–∞</TabsTrigger>
                <TabsTrigger value="channels">–¢—Ä–æ–ø—ã</TabsTrigger>
              </TabsList>
              
              <TabsContent value="personal" className="flex-1 mt-4">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-lg font-semibold">–ü–µ—Ä—Å–æ–Ω–∞–∂–∏</h2>
                  <Button size="sm" variant="outline">
                    <Icon name="Plus" size={16} />
                  </Button>
                </div>
                <ScrollArea className="h-[450px]">
                  <div className="space-y-2">
                    {personalChats.map((chat, index) => (
                      <ChatCard key={chat.id} chat={chat} index={index} selectedChat={selectedChat} setSelectedChat={setSelectedChat} taiGaMode={taiGaMode} />
                    ))}
                  </div>
                </ScrollArea>
              </TabsContent>

              <TabsContent value="groups" className="flex-1 mt-4">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-lg font-semibold">–°—Ç–æ–π–±–∏—â–∞</h2>
                  <Button size="sm" variant="outline">
                    <Icon name="Plus" size={16} />
                  </Button>
                </div>
                <ScrollArea className="h-[450px]">
                  <div className="space-y-2">
                    {groupChats.map((chat, index) => (
                      <ChatCard key={chat.id} chat={chat} index={index} selectedChat={selectedChat} setSelectedChat={setSelectedChat} taiGaMode={taiGaMode} showMembers />
                    ))}
                  </div>
                </ScrollArea>
              </TabsContent>

              <TabsContent value="channels" className="flex-1 mt-4">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-lg font-semibold">–ö–æ—á–µ–≤—ã–µ —Ç—Ä–æ–ø—ã</h2>
                  <Button size="sm" variant="outline">
                    <Icon name="Plus" size={16} />
                  </Button>
                </div>
                <ScrollArea className="h-[450px]">
                  <div className="space-y-2">
                    {channels.map((chat, index) => (
                      <ChatCard key={chat.id} chat={chat} index={index} selectedChat={selectedChat} setSelectedChat={setSelectedChat} taiGaMode={taiGaMode} showSubscribers />
                    ))}
                  </div>
                </ScrollArea>
              </TabsContent>
            </Tabs>
          </Card>

          {/* –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —á–∞—Ç–∞ */}
          <Card className="lg:col-span-2 flex flex-col">
            <ChatHeader chatInfo={getCurrentChatInfo()} selectedChatType={selectedChatType} />
            <ChatMessages messages={getCurrentMessages()} taiGaMode={taiGaMode} />
            <ChatInput 
              messageText={messageText}
              setMessageText={setMessageText}
              handleSendMessage={handleSendMessage}
              isOfflineMode={isOfflineMode}
              taiGaMode={taiGaMode}
            />
          </Card>
        </div>

        {/* –ü–∞–Ω–µ–ª—å —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ –∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ */}
        <Card className="mt-6 p-6">
          <h3 className="text-lg font-semibold mb-4">üöÄ –ö–æ–º–∞–Ω–¥–∞ UniSib Messenger</h3>
          
          <div className="grid md:grid-cols-2 lg:grid-cols-5 gap-4 mb-6">
            <Button variant="outline" className="h-auto p-4 flex flex-col items-center gap-2">
              <div className="text-3xl">üêª</div>
              <div className="text-center">
                <div className="font-medium">–ú–∏—à–∞–Ω—è</div>
                <div className="text-xs text-muted-foreground">–ì–ª–∞–≤–Ω—ã–π –º–∞—Å–∫–æ—Ç</div>
              </div>
            </Button>

            <Button variant="outline" className="h-auto p-4 flex flex-col items-center gap-2">
              <div className="text-3xl">ü¶å</div>
              <div className="text-center">
                <div className="font-medium">–°–æ–±–æ–ª—å-–∫—É—Ä—å–µ—Ä</div>
                <div className="text-xs text-muted-foreground">–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞</div>
              </div>
            </Button>

            <Button variant="outline" className="h-auto p-4 flex flex-col items-center gap-2">
              <div className="text-3xl">üê∫</div>
              <div className="text-center">
                <div className="font-medium">–•–∞—Å–∫–∏-—Å—Ç—Ä–∏–º–µ—Ä</div>
                <div className="text-xs text-muted-foreground">–î–ª—è –≥–µ–π–º–µ—Ä–æ–≤</div>
              </div>
            </Button>

            <Button variant="outline" className="h-auto p-4 flex flex-col items-center gap-2">
              <div className="text-3xl">ü¶≠</div>
              <div className="text-center">
                <div className="font-medium">–ù–µ—Ä–ø–∞-—ç–º–æ–¥–∑–∏</div>
                <div className="text-xs text-muted-foreground">–î–ª—è —Ä–æ–º–∞–Ω—Ç–∏–∫–æ–≤</div>
              </div>
            </Button>

            <Button variant="outline" className="h-auto p-4 flex flex-col items-center gap-2">
              <div className="text-3xl">ü¶â</div>
              <div className="text-center">
                <div className="font-medium">–®–∞–º–∞–Ω-–∞–π—Ç–∏—à–Ω–∏–∫</div>
                <div className="text-xs text-muted-foreground">–ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö</div>
              </div>
            </Button>
          </div>

          <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-4">
            <Button 
              variant="outline" 
              className="h-auto p-4 flex flex-col items-center gap-2"
              onClick={() => setIsOfflineMode(!isOfflineMode)}
            >
              <Icon name={isOfflineMode ? "WifiOff" : "Wifi"} size={24} />
              <div className="text-center">
                <div className="font-medium">–û—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º "–¢–∞–π–≥–∞"</div>
                <div className="text-xs text-muted-foreground">
                  {isOfflineMode ? "–í–∫–ª—é—á—ë–Ω" : "–í—ã–∫–ª—é—á–µ–Ω"}
                </div>
              </div>
            </Button>
            
            <Button variant="outline" className="h-auto p-4 flex flex-col items-center gap-2">
              <Icon name="Palette" size={24} />
              <div className="text-center">
                <div className="font-medium">–ì–∏–±—Ä–∏–¥–Ω—ã–µ —Ç–µ–º—ã</div>
                <div className="text-xs text-muted-foreground">UniMessage + –°–∏–±–∏—Ä—å</div>
              </div>
            </Button>
            
            <Button variant="outline" className="h-auto p-4 flex flex-col items-center gap-2">
              <Icon name="CloudSnow" size={24} />
              <div className="text-center">
                <div className="font-medium">–ü–æ–≥–æ–¥–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ</div>
                <div className="text-xs text-muted-foreground">-25¬∞C, –º–µ—Ç–µ–ª—å</div>
              </div>
            </Button>
            
            <Button variant="outline" className="h-auto p-4 flex flex-col items-center gap-2">
              <Icon name="Globe" size={24} />
              <div className="text-center">
                <div className="font-medium">–ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç—å</div>
                <div className="text-xs text-muted-foreground">Web, Mobile, Desktop</div>
              </div>
            </Button>
          </div>
        </Card>
      </div>
    </div>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —á–∞—Ç–∞
function ChatCard({ chat, index, selectedChat, setSelectedChat, taiGaMode, showMembers = false, showSubscribers = false }) {
  return (
    <Card 
      className={`p-3 cursor-pointer transition-colors hover:bg-accent/50 ${
        selectedChat === index ? 'bg-accent/20 border-accent' : ''
      } ${taiGaMode ? 'taiga-mode' : ''}`}
      onClick={() => setSelectedChat(index)}
    >
      <div className="flex items-center gap-3">
        <Avatar>
          <AvatarFallback className="text-lg">{chat.avatar}</AvatarFallback>
        </Avatar>
        
        <div className="flex-1 min-w-0">
          <div className="flex items-center justify-between">
            <h3 className="font-medium truncate">{chat.name}</h3>
            <span className="text-xs text-muted-foreground">{chat.time}</span>
          </div>
          
          <div className="flex items-center justify-between">
            <p className="text-sm text-muted-foreground truncate">
              {chat.lastMessage}
            </p>
            {chat.unread > 0 && (
              <Badge className="ml-2 bg-accent text-accent-foreground">
                {chat.unread}
              </Badge>
            )}
          </div>
          
          <div className="flex items-center gap-1 mt-1">
            {showMembers && (
              <span className="text-xs text-muted-foreground">üë• {chat.members} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</span>
            )}
            {showSubscribers && (
              <span className="text-xs text-muted-foreground">üì¢ {chat.subscribers} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</span>
            )}
            {!showMembers && !showSubscribers && (
              <>
                <div className={`w-2 h-2 rounded-full ${
                  chat.status === '–æ–Ω–ª–∞–π–Ω' ? 'bg-green-500' : 
                  chat.status === '–≤ —Ç–∞–π–≥–µ' ? 'bg-orange-500' : 'bg-gray-400'
                }`} />
                <span className="text-xs text-muted-foreground">{chat.status}</span>
              </>
            )}
          </div>
        </div>
      </div>
    </Card>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ —á–∞—Ç–∞
function ChatHeader({ chatInfo, selectedChatType }) {
  if (!chatInfo) return null
  
  return (
    <div className="flex items-center justify-between p-4 border-b">
      <div className="flex items-center gap-3">
        <Avatar>
          <AvatarFallback className="text-lg">{chatInfo.avatar}</AvatarFallback>
        </Avatar>
        <div>
          <h3 className="font-semibold">{chatInfo.name}</h3>
          <p className="text-sm text-muted-foreground">
            {selectedChatType === 'groups' && `${chatInfo.members} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`}
            {selectedChatType === 'channels' && `${chatInfo.subscribers} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤`}
            {selectedChatType === 'personal' && chatInfo.status}
          </p>
        </div>
      </div>
      
      <div className="flex items-center gap-2">
        <Button variant="outline" size="sm">
          <Icon name="Phone" size={16} />
        </Button>
        <Button variant="outline" size="sm">
          <Icon name="Video" size={16} />
        </Button>
        <Button variant="outline" size="sm">
          <Icon name="MoreVertical" size={16} />
        </Button>
      </div>
    </div>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
function ChatMessages({ messages, taiGaMode }) {
  return (
    <ScrollArea className={`flex-1 p-4 ${taiGaMode ? 'taiga-mode' : ''}`}>
      <div className="space-y-4">
        {messages.map((message) => (
          <div 
            key={message.id}
            className={`flex gap-3 ${message.isMine ? 'flex-row-reverse' : ''}`}
          >
            <Avatar className="w-8 h-8">
              <AvatarFallback className="text-sm">{message.avatar}</AvatarFallback>
            </Avatar>
            
            <div className={`max-w-[70%] ${message.isMine ? 'text-right' : ''}`}>
              <Card className={`p-3 ${
                message.isMine 
                  ? 'bg-primary text-primary-foreground ml-auto' 
                  : 'bg-muted'
              }`}>
                <p className="text-sm">{message.text}</p>
              </Card>
              <p className="text-xs text-muted-foreground mt-1">{message.time}</p>
            </div>
          </div>
        ))}
        
        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–µ–∂–∏–º–∞ "–¢–∞–π–≥–∞" */}
        {taiGaMode && (
          <div className="text-center py-4">
            <Badge className="bg-orange-500 text-white">
              <Icon name="TreePine" size={12} className="mr-1" />
              –†–µ–∂–∏–º "–¢–∞–π–≥–∞" –∞–∫—Ç–∏–≤–µ–Ω - —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ —Å–∂–∞—Ç—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            </Badge>
          </div>
        )}
      </div>
    </ScrollArea>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
function ChatInput({ messageText, setMessageText, handleSendMessage, isOfflineMode, taiGaMode }) {
  return (
    <div className="p-4 border-t">
      <div className="flex items-center gap-2">
        <Input
          placeholder="–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ..."
          value={messageText}
          onChange={(e) => setMessageText(e.target.value)}
          onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
          className="flex-1"
          disabled={isOfflineMode}
        />
        
        <Button variant="outline" size="sm" disabled={taiGaMode}>
          <Icon name="Paperclip" size={16} />
        </Button>
        
        <Button variant="outline" size="sm" disabled={taiGaMode}>
          <Icon name="Mic" size={16} />
        </Button>
        
        <Button 
          onClick={handleSendMessage}
          disabled={!messageText.trim() || isOfflineMode}
          className="bg-accent hover:bg-accent/90 text-white"
        >
          <Icon name="Send" size={16} />
        </Button>
      </div>
      
      {isOfflineMode && (
        <p className="text-xs text-muted-foreground mt-2 flex items-center gap-1">
          <Icon name="WifiOff" size={12} />
          –°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏
        </p>
      )}
    </div>
  )
}